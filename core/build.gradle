buildscript {
  ext.scala_version = '2.13.3'
}

plugins {
  id 'java'
  id 'scala'
//id 'kotlin'
  id 'groovy'
  id 'maven-publish'
  id 'com.github.johnrengelman.shadow' // version '6.0.0'
}

group = 'job-io'
version = '0.1'

sourceSets {
  main {
    groovy {
      srcDirs = ['src/groovy']
    }
    java {
      srcDirs = ['src/java']
    }
    scala {
      srcDirs = ['src/scala']
    }
  }
  test {
    java {
      srcDir 'tests'
    }
  }
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  implementation "org.scala-lang:scala-library:$scala_version"
  implementation "org.scala-lang:scala-compiler:$scala_version"
  implementation 'com.typesafe.akka:akka-actor_2.11:2.3.11'

  implementation 'org.codehaus.groovy:groovy-all:3.0.10' // 2.4.6'
//  implementation 'org.codehaus.groovy:http-builder:0.4.0'

  implementation project(':common-utils')
}

shadowJar {
  zip64 true
}

tasks.withType(JavaCompile) {
  if (JavaVersion.current() != project.targetCompatibility) {
//    throw new GradleException(
    println "+------ Warning: Java version (JAVA_HOME) possible mismatch -----\n" +
            "| In task $name ($project.name), the java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.\n" +
            "+----------------------------------------------------------------"
//    )
  } else {
    println ">> From task $name (in $project.name), using java version ${JavaVersion.current()} "
  }
  options.encoding = 'UTF-8'
  options.compilerArgs += ["-Xlint:unchecked"]
  options.compilerArgs += ["-Xlint:deprecation"]
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.additionalParameters = ["-feature", "-language:postfixOps"]
  println ">> From task $name (in $project.name), using scala version $scala_version "
}

task runGroovyScript(type: JavaExec) {
  description 'Run Groovy script'
  // Set main property to name of Groovy script class.
  main = 'SensorReader'
  systemProperty 'java.library.path', 'src/C'
  // Set classpath for running the Groovy script.
  classpath = sourceSets.main.runtimeClasspath
}
